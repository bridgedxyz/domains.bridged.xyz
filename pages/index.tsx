import Head from "next/head";
import React, { useState } from "react";
import styles from "../styles/Home.module.css";
import Axios, { AxiosError } from "axios";

const client = Axios.create({
  baseURL: "/api",
});

export default function Home() {
  return (
    <div className={styles.container}>
      <Head>
        <title>Domains</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <SearchView />
      </main>

      <footer className={styles.footer}>
        <a href="https://grida.co" target="_blank" rel="noopener noreferrer">
          Powered by Grida
        </a>
      </footer>
    </div>
  );
}

function SearchView() {
  const [results, setResults] = useState<DomainCheck[]>([]);
  const [q, setQ] = useState("");
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState("");

  const search = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);
    setError("");
    try {
      const { data } = await client.get("/search", {
        params: {
          q,
        },
      });

      setResults(data);
    } catch (e: any) {
      const err = e as AxiosError;
      setError((err.response?.data as any)?.message || err.message);
    }
    setLoading(false);
  };

  return (
    <div>
      <form onSubmit={search}>
        <input
          type="text"
          value={q}
          onChange={(e) => setQ(e.target.value)}
          placeholder="Search for a domain name"
        />
        <button type="submit">Search</button>
      </form>
      <label>{error}</label>
      {loading && <p>Loading...</p>}
      <ul>
        {results?.map((result: DomainCheck) => (
          <li key={result.domain}>
            Available: {result.available ? "Yes" : "No"}
            <br />
            {result.domain}
            <br />
            {result.available && <>Price: $20</>}
          </li>
        ))}
      </ul>
    </div>
  );
}

interface DomainCheck {
  domain: string;
  available: boolean;
  premium: boolean;
}
